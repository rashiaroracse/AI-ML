class missionaryandcannibal():
    def validstate(self,new_state):
        if (new_state[0] < new_state[1] and new_state[0] >= 1) or (new_state[3] < new_state[4] and new_state[3] >= 1):
            return False
        else:
            return True

    def solutionprint(self):
        for i in visited:
            print(visited)
            print(graph)
            exit(0)

    def dfs(self, current_state):
        if current_state ==  goal_state:
            self.solutionprint()
        else:
            if current_state[2]==0:
                "Move 1 missionary and 1 cannibal to the right"
                if (current_state[0] >= 1 and current_state[1] >= 1):
                    new_state = (current_state[0] - 1, current_state[1] - 1, 1, current_state[3] + 1, current_state[4] + 1)
                    if self.validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state] = [(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)
                "Move 2 Cannibals"
                if (current_state[1] >= 2):
                    new_state = (current_state[0], current_state[1] - 2, 1, current_state[3], current_state[4] + 2)
                    if self.validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state]= [(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)
                "Move 2 missionaries"
                if (current_state[0] >= 2):
                    new_state = (current_state[0] - 2, current_state[1], 1, current_state[3] + 2, current_state[4])
                    if self.validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state]=[(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)

            else:
                "Move 1 missionary to the left"
                if (current_state[3] >= 1):
                    new_state = (current_state[0] + 1, current_state[1], 0, current_state[3] - 1, current_state[4])
                    if self.validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state]=[(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)
                "Move 1 Cannibal"
                if (current_state[4] >= 1):
                    new_state = (current_state[0], current_state[1] + 1, 0, current_state[3], current_state[4] - 1)
                    if self. validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state]=[(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)
                "Move 1 Missionary and 1 cannibal"
                if (current_state[3] >= 1 and current_state[4] >= 1):
                    new_state = (
                    current_state[0] + 1, current_state[1] + 1, 0, current_state[3] - 1, current_state[4] - 1)
                    if self.validstate(new_state):
                        if not visited.__contains__(new_state):
                            visited.append(new_state)
                            graph[current_state]=[(new_state)]
                            graph[new_state] = []
                            mc = new_state
                            self.dfs(mc)


print("Enter the number of missionaries")
missionaries = int(input())
print("Enter the number of cannibals")
cannibals = int(input())
while missionaries != cannibals:
    print("Enter the number of missionaries")
    missionaries = int(input())
    print("Enter the number of cannibals")
    cannibals = int(input())
current_state = (missionaries, cannibals, 0, 0, 0)
goal_state = (0, 0, 1, missionaries, cannibals)
graph = {}
visited = [(missionaries,cannibals,0,1,1)]
boat = current_state[2]
mission = missionaryandcannibal()
mission.dfs(current_state)

